{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar startButton = document.querySelector(\".button\");\nvar gameField = document.querySelector(\".game-field\");\nvar gameScore = document.querySelector(\".game-score\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar board;\nvar columns = 4;\nvar rows = 4;\nvar score = 0;\nvar filterZero = function(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n};\nfunction compareFields(prevBoard, currentBoard) {\n    for(var i = 0; i < rows; i++)for(var j = 0; j < columns; j++){\n        if (prevBoard[i][j] !== currentBoard[i][j]) return true;\n    }\n    return false;\n}\nfunction slide(row) {\n    var currentRow = filterZero(row);\n    for(var i = 0; i < currentRow.length - 1; i++)if (currentRow[i] === currentRow[i + 1]) {\n        currentRow[i] *= 2;\n        currentRow.splice(i + 1, 1);\n        score += currentRow[i];\n    }\n    while(currentRow.length < columns)currentRow.push(0);\n    return currentRow;\n}\nvar hasEmptyCell = function() {\n    for(var r = 0; r < columns; r++)for(var c = 0; c < columns; c++){\n        if (board[r][c] === 0) return true;\n    }\n    return false;\n};\nfunction renderField() {\n    for(var r = 0; r < columns; r++)for(var c = 0; c < columns; c++){\n        var cell = gameField.rows[r].cells[c];\n        cell.className = \"field-cell field-cell--\".concat(board[r][c]);\n        cell.textContent = board[r][c] || \"\";\n    }\n}\nfunction setRandomCell() {\n    if (!hasEmptyCell()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * columns);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            board[r][c] = 2;\n            renderField();\n            found = true;\n        }\n    }\n}\nvar transposeField = function(currentField) {\n    return currentField[0].map(function(_, colIndex) {\n        return currentField.map(function(row) {\n            return row[colIndex];\n        });\n    });\n};\nfunction slideLeft() {\n    var transposedField = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : board;\n    for(var r = 0; r < columns; r++){\n        var row = transposedField[r];\n        row = slide(row);\n        transposedField[r] = row;\n    }\n}\nfunction slideRight() {\n    var transposedField = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : board;\n    for(var r = 0; r < columns; r++){\n        var row = transposedField[r].reverse();\n        row = slide(row);\n        transposedField[r] = row.reverse();\n    }\n}\nfunction slideDown() {\n    var newField = transposeField(board);\n    slideRight(newField);\n    board = transposeField(newField);\n}\nfunction slideUp() {\n    var newField = transposeField(board);\n    slideLeft(newField);\n    board = transposeField(newField);\n}\nvar winGame = function() {\n    for(var i = 0; i < board[0].length; i++)for(var j = 0; j < board.length; j++){\n        if (board[i][j] === 2048) return true;\n    }\n    return false;\n};\nvar checkFields = function(fieldToCheck) {\n    for(var i = 0; i < columns; i++)for(var j = 0; j < columns - 1; j++){\n        if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) return true;\n    }\n    return false;\n};\nvar gameOver = function(boardToCheck) {\n    if (hasEmptyCell()) return false;\n    var newDesk = transposeField(boardToCheck);\n    if (checkFields(newDesk) || checkFields(boardToCheck)) return false;\n    return true;\n};\nstartButton.addEventListener(\"click\", function() {\n    startButton.classList.toggle(\"start\", false);\n    startButton.classList.toggle(\"restart\", true);\n    startButton.innerText = \"Restart\";\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    messageStart.classList.add(\"hidden\");\n    board = Array.from({\n        length: columns\n    }, function() {\n        return Array(columns).fill(0);\n    });\n    score = 0;\n    gameScore.textContent = score;\n    setRandomCell();\n    setRandomCell();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (gameOver(board)) messageLose.classList.remove(\"hidden\");\n    if (winGame()) {\n        messageWin.classList.remove(\"hidden\");\n        renderField();\n    } else {\n        var prevBoard = deepCloneBoard(board);\n        switch(e.key){\n            case \"ArrowLeft\":\n                slideLeft();\n                break;\n            case \"ArrowRight\":\n                slideRight();\n                break;\n            case \"ArrowDown\":\n                slideDown();\n                break;\n            case \"ArrowUp\":\n                slideUp();\n                break;\n        }\n        if (compareFields(prevBoard, board)) {\n            setRandomCell();\n            renderField();\n        }\n    }\n    gameScore.textContent = score;\n});\nfunction deepCloneBoard(newBoard) {\n    return newBoard.map(function(row) {\n        return _to_consumable_array(row);\n    });\n}\n\n//# sourceMappingURL=index.cf0fde68.js.map\n","'use strict';\n\nconst startButton = document.querySelector('.button');\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\n\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nlet board;\nconst columns = 4;\nconst rows = 4;\nlet score = 0;\n\nconst filterZero = (row) => row.filter(num => num !== 0);\n\nfunction compareFields(prevBoard, currentBoard) {\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < columns; j++) {\n      if (prevBoard[i][j] !== currentBoard[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction slide(row) {\n  const currentRow = filterZero(row);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow.splice(i + 1, 1);\n      score += currentRow[i];\n    }\n  }\n\n  while (currentRow.length < columns) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n}\n\nconst hasEmptyCell = () => {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction renderField() {\n  for (let r = 0; r < columns; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.rows[r].cells[c];\n\n      cell.className = `field-cell field-cell--${board[r][c]}`;\n      cell.textContent = board[r][c] || '';\n    }\n  }\n}\n\nfunction setRandomCell() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * columns);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = 2;\n      renderField();\n      found = true;\n    }\n  }\n}\n\nconst transposeField = (currentField) => currentField[0]\n  .map((_, colIndex) => currentField\n    .map(row => row[colIndex]));\n\nfunction slideLeft(transposedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transposedField[r];\n\n    row = slide(row);\n    transposedField[r] = row;\n  }\n}\n\nfunction slideRight(transposedField = board) {\n  for (let r = 0; r < columns; r++) {\n    let row = transposedField[r].reverse();\n\n    row = slide(row);\n    transposedField[r] = row.reverse();\n  }\n}\n\nfunction slideDown() {\n  const newField = transposeField(board);\n\n  slideRight(newField);\n  board = transposeField(newField);\n}\n\nfunction slideUp() {\n  const newField = transposeField(board);\n\n  slideLeft(newField);\n  board = transposeField(newField);\n}\n\nconst winGame = () => {\n  for (let i = 0; i < board[0].length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst checkFields = (fieldToCheck) => {\n  for (let i = 0; i < columns; i++) {\n    for (let j = 0; j < columns - 1; j++) {\n      if (fieldToCheck[i][j] === fieldToCheck[i][j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst gameOver = (boardToCheck) => {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  const newDesk = transposeField(boardToCheck);\n\n  if (checkFields(newDesk) || checkFields(boardToCheck)) {\n    return false;\n  }\n\n  return true;\n};\n\nstartButton.addEventListener('click', () => {\n  startButton.classList.toggle('start', false);\n  startButton.classList.toggle('restart', true);\n  startButton.innerText = 'Restart';\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  board = Array.from({ length: columns }, () => Array(columns).fill(0));\n\n  score = 0;\n  gameScore.textContent = score;\n\n  setRandomCell();\n  setRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (gameOver(board)) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (winGame()) {\n    messageWin.classList.remove('hidden');\n    renderField();\n  } else {\n    const prevBoard = deepCloneBoard(board);\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        slideLeft();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        break;\n    }\n\n    if (compareFields(prevBoard, board)) {\n      setRandomCell();\n      renderField();\n    }\n  }\n\n  gameScore.textContent = score;\n});\n\nfunction deepCloneBoard(newBoard) {\n  return newBoard.map(row => [...row]);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","board","startButton","document","querySelector","gameField","gameScore","messageLose","messageWin","messageStart","score","slide","row","currentRow","filter","num","splice","push","hasEmptyCell","r","c","renderField","cell","rows","cells","className","concat","textContent","setRandomCell","found","Math","floor","random","transposeField","currentField","map","_","colIndex","slideLeft","transposedField","arguments","slideRight","reverse","winGame","j","checkFields","fieldToCheck","columns","addEventListener","classList","toggle","innerText","add","from","fill","e","boardToCheck","remove","newField","prevBoard","newBoard","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","key","compareFields","currentBoard"],"version":3,"file":"index.cf0fde68.js.map"}